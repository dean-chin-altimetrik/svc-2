name: create-rel-branch

on:
  workflow_dispatch:
    inputs:
      jira_scope_id:
        description: "Jira Scope ID (required)"
        required: true
        type: string
        default: ""
      create_mode:
        description: "How to create the release branch"
        required: true
        type: choice
        options:
          - "Bump Major"
          - "Bump Minor"
          - "Specify Major.Minor version manually"
        default: "Bump Minor"
      major_version:
        description: "Major version number (required if specifying manually)"
        required: false
        type: string
        default: ""
      minor_version:
        description: "Minor version number (required if specifying manually)"
        required: false
        type: string
        default: ""
      ignore_branch_exists:
        description: "Ignore if branch already exists and continue with the flow"
        required: false
        type: boolean
        default: false

jobs:
  prepare_release_branch:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      branch_name: ${{ steps.calc_branch_version.outputs.branch_name }}
      major: ${{ steps.calc_branch_version.outputs.major }}
      minor: ${{ steps.calc_branch_version.outputs.minor }}
      jira_scope_id: ${{ steps.calc_branch_version.outputs.jira_scope_id }}
      branch_exists: ${{ steps.check_branch.outputs.branch_exists }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch Latest Git Tags (SemVer aware)
        id: latest_tags
        run: |
          # Get all version tags and sort them (format: v<MAJOR>.<MINOR>.<PATCH>)
          all_tags=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' | sort -V)
          if [ -z "$all_tags" ]; then
            echo "No version tags found, will start with release/1.0"
            echo "has_tags=false" >> $GITHUB_OUTPUT
            echo "latest_tag=" >> $GITHUB_OUTPUT
            echo "latest_major=0" >> $GITHUB_OUTPUT
            echo "latest_minor=0" >> $GITHUB_OUTPUT
            echo "latest_patch=0" >> $GITHUB_OUTPUT

            # Output tag summary for no tags case
            echo "## 📋 Git Tag Information" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Latest Tag Found:** *No version tags found in repository*" >> $GITHUB_STEP_SUMMARY
            echo "- **Version Calculation:** Starting with first release version \`1.0\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            # Get the latest tag
            latest_tag=$(echo "$all_tags" | tail -n1)

            # Extract major.minor.patch from latest tag (remove 'v' prefix)
            base_version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$base_version"

            echo "has_tags=true" >> $GITHUB_OUTPUT
            echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
            echo "latest_major=$major" >> $GITHUB_OUTPUT
            echo "latest_minor=$minor" >> $GITHUB_OUTPUT
            echo "latest_patch=$patch" >> $GITHUB_OUTPUT

            # Output tag summary for existing tags case
            echo "## 📋 Git Tag Information" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Latest Tag Found:** \`$latest_tag\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Version Calculation:** Latest release is \`$major.$minor.$patch\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Calculate Branch Version
        id: calc_branch_version
        run: |
          create_mode="${{ github.event.inputs.create_mode }}"
          has_tags="${{ steps.latest_tags.outputs.has_tags }}"
          jira_scope_id="${{ github.event.inputs.jira_scope_id }}"

          if [ "$create_mode" = "Specify Major.Minor version manually" ]; then
            major="${{ github.event.inputs.major_version }}"
            minor="${{ github.event.inputs.minor_version }}"

            # Validate inputs
            if [ -z "$major" ] || [ -z "$minor" ]; then
              echo "Error: Both major and minor version must be provided when specifying manually"
              exit 1
            fi

            # Validate that they are numbers
            if ! [[ "$major" =~ ^[0-9]+$ ]] || ! [[ "$minor" =~ ^[0-9]+$ ]]; then
              echo "Error: Major and minor versions must be numeric"
              exit 1
            fi

            echo "Using manually specified version: $major.$minor"

          elif [ "$create_mode" = "Bump Major" ]; then
            # Bump the major version and reset minor to 0
            if [ "$has_tags" = "false" ]; then
              # If no tags, start with first major release 1.0
              major=1
              minor=0
              echo "No tags found, starting with first release: $major.$minor"
            else
              latest_major="${{ steps.latest_tags.outputs.latest_major }}"
              major=$((latest_major + 1))
              minor=0
              echo "Bumped major version to: $major.$minor"
            fi

          else
            # Bump Minor (default)
            if [ "$has_tags" = "false" ]; then
              # No tags exist, start with 1.0
              major=1
              minor=0
              echo "No tags found, starting with first release: $major.$minor"
            else
              # Tags exist, increment minor version
              latest_major="${{ steps.latest_tags.outputs.latest_major }}"
              latest_minor="${{ steps.latest_tags.outputs.latest_minor }}"

              major=$latest_major
              minor=$((latest_minor + 1))

              echo "Auto-calculated next minor version: $major.$minor"
            fi
          fi

          branch_name="release/$major.$minor"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT
          # Pass Jira Scope ID through as an output so downstream steps can use it
          echo "jira_scope_id=$jira_scope_id" >> $GITHUB_OUTPUT

      - name: Check if Branch Already Exists
        id: check_branch
        run: |
          branch_name="${{ steps.calc_branch_version.outputs.branch_name }}"
          ignore_branch_exists="${{ github.event.inputs.ignore_branch_exists }}"

          # Check if branch exists locally or remotely
          if git show-ref --verify --quiet refs/heads/$branch_name || git show-ref --verify --quiet refs/remotes/origin/$branch_name; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "Branch $branch_name already exists!"

            if [ "$ignore_branch_exists" = "true" ]; then
              echo "⚠️ Branch exists but ignoring due to ignore_branch_exists=true"
              echo "Continuing with the workflow..."
              
              # Output warning summary
              echo "⚠️ **WARNING: Branch \`$branch_name\` already exists!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Continuing with the workflow as requested (ignore_branch_exists=true)." >> $GITHUB_STEP_SUMMARY
              echo "The existing branch will be used for subsequent steps." >> $GITHUB_STEP_SUMMARY
            else
              # Output error summary
              echo "❌ **ERROR: Branch \`$branch_name\` already exists!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Please choose a different version, delete the existing branch first, or set ignore_branch_exists=true to continue." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "Branch $branch_name does not exist, safe to create"
          fi

      - name: Release Branch Info
        run: |
          branch_name="${{ steps.calc_branch_version.outputs.branch_name }}"
          major="${{ steps.calc_branch_version.outputs.major }}"
          minor="${{ steps.calc_branch_version.outputs.minor }}"
          create_mode="${{ github.event.inputs.create_mode }}"
          branch_exists="${{ steps.check_branch.outputs.branch_exists }}"
          actor="${{ github.actor }}"
          jira_scope_id="${{ steps.calc_branch_version.outputs.jira_scope_id }}"
          has_tags="${{ steps.latest_tags.outputs.has_tags }}"
          latest_major="${{ steps.latest_tags.outputs.latest_major }}"
          latest_minor="${{ steps.latest_tags.outputs.latest_minor }}"
          latest_patch="${{ steps.latest_tags.outputs.latest_patch }}"

          echo "# Release Branch Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch Name:** \`$branch_name\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Major Version:** \`$major\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Minor Version:** \`$minor\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Creation Mode:** \`$create_mode\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered By:** \`$actor\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Jira Scope ID:** \`$jira_scope_id\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Ignore Branch Exists:** \`${{ github.event.inputs.ignore_branch_exists }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add final version calculation details using creation mode
          if [ "$has_tags" = "true" ]; then
            if [ "$create_mode" = "Bump Major" ]; then
              echo "- **Final Version:** Bumped major from \`$latest_major.$latest_minor\` to \`$major.$minor\`" >> $GITHUB_STEP_SUMMARY
            elif [ "$create_mode" = "Bump Minor" ]; then
              echo "- **Final Version:** Incremented minor from \`$latest_major.$latest_minor\` to \`$major.$minor\`" >> $GITHUB_STEP_SUMMARY
            elif [ "$create_mode" = "Specify Major.Minor version manually" ]; then
              echo "- **Final Version:** Manually set to \`$major.$minor\` (latest was \`$latest_major.$latest_minor\`)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Final Version:** \`$major.$minor\`" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Final Version:** Starting with first release version \`$major.$minor\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "✅ **Branch \`$branch_name\` is available for creation**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **APPROVAL REQUIRED**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The next job will require approval from the \`branch-creation-approval\` environment." >> $GITHUB_STEP_SUMMARY
          echo "Please review the details above and approve when prompted." >> $GITHUB_STEP_SUMMARY

  create_release_branch:
    runs-on: ubuntu-latest
    needs: prepare_release_branch
    environment: branch-creation-approval
    outputs:
      branch_name: ${{ steps.create.outputs.branch_name }}
    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release Branch
        id: create
        run: |
          branch_name="${{ needs.prepare_release_branch.outputs.branch_name }}"
          branch_exists="${{ needs.prepare_release_branch.outputs.branch_exists }}"
          ignore_branch_exists="${{ github.event.inputs.ignore_branch_exists }}"

          # Configure git
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          if [ "$branch_exists" = "true" ] && [ "$ignore_branch_exists" = "true" ]; then
            echo "Branch $branch_name already exists and ignore_branch_exists=true"
            echo "Switching to existing branch: $branch_name"
            
            # Switch to the existing branch
            git checkout $branch_name
            
            # Pull latest changes from remote
            git pull origin $branch_name || echo "No remote branch to pull from"
            
            echo "✅ Using existing branch: $branch_name"
          else
            echo "Creating new branch: $branch_name"
            
            # Create and switch to the new branch
            git checkout -b $branch_name

            # Ensure the rel-build workflow file exists on the release branch
            # This is needed for the workflow_dispatch to work properly
            if [ ! -f ".github/workflows/rel-build.yml" ]; then
              echo "Copying rel-build.yml to release branch..."
              # The file should already exist since we're branching from main
              # But let's make sure it's there
              git checkout main -- .github/workflows/rel-build.yml || true
              git add .github/workflows/rel-build.yml || true
              git commit -m "Add rel-build workflow to release branch" || true
            fi

            # Set up remote URL with token
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

            # Push the new branch
            git push -u origin $branch_name

            echo "✅ Successfully created and pushed branch: $branch_name"
          fi

          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Upsert component info to Jira Release Scope
        uses: dean-chin-altimetrik/platform-github-actions/.github/actions/jira-rel-scope@main
        with:
          command: "upsert"
          jira_key: ${{ needs.prepare_release_branch.outputs.jira_scope_id }}
          component: ${{ github.event.repository.name }}
          branch_name: ${{ needs.prepare_release_branch.outputs.branch_name }}
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}

      - name: Trigger Build Workflow
        run: |
          branch_name="${{ needs.prepare_release_branch.outputs.branch_name }}"

          echo "Triggering rel-build workflow for branch: $branch_name"

          # Trigger the rel-build workflow on the release branch itself
          response=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rel-build.yml/dispatches" \
            -d '{
              "ref": "'$branch_name'"
            }')

          # Extract HTTP status code
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)

          echo "HTTP Status Code: $http_code"
          echo "Response: $response_body"

          if [ "$http_code" = "204" ]; then
            echo "✅ Successfully triggered rel-build workflow for branch: $branch_name"
          else
            echo "❌ Failed to trigger workflow. HTTP $http_code: $response_body"
            echo "This might be due to insufficient permissions or the workflow not being available."
            echo "The build workflow will need to be triggered manually or via push to the release branch."
          fi

      - name: Final Summary
        run: |
          branch_name="${{ needs.prepare_release_branch.outputs.branch_name }}"
          major="${{ needs.prepare_release_branch.outputs.major }}"
          minor="${{ needs.prepare_release_branch.outputs.minor }}"
          branch_url="https://github.com/${{ github.repository }}/tree/$branch_name"

          echo "# ✅ Release Branch Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`$branch_name\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`$major.$minor\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**[View Branch]($branch_url)**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **The rel-build workflow has been triggered for this branch!**" >> $GITHUB_STEP_SUMMARY
